name: Build_mt7981_ax3000t

on: 
  repository_dispatch:
  workflow_dispatch:

jobs:
  Build_mt7981_ax3000t:
    runs-on: ubuntu-latest
    steps:
    - name: Clone Repository
      uses: actions/checkout@v4

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "Asia/Shanghai" 
        sudo -E swapoff -a
        sudo -E rm -f /swapfile
        sudo -E docker image prune -a -f
        sudo -E snap set system refresh.retain=2
        sudo -E apt-get -y purge dotnet* firefox ghc* google* llvm* mono* mysql* openjdk* php* zulu*
        sudo -E apt-get -y autoremove --purge
        sudo -E rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /etc/mysql /etc/php /usr/local/share/boost
        [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo -E apt-get update -y
        sudo -E apt-get install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf g++ file clang nano genisoimage python3.8 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev libfuse-dev libfuse-dev python3-setuptools
        pip install aligo
        sudo -E apt-get clean
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -h
        
    - name: Clone source code
      env: 
        REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-24.10
        REPO_BRANCH: openwrt-24.10-6.6
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        cp -f ../diy/mt798x/op1.sh ./
        chmod +x ./op1.sh && ./op1.sh

    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        cp -f ../diy/mt798x/t7op2.sh ./        
        chmod +x ./t7op2.sh && ./t7op2.sh      
        sed -i "s/DISTRIB_DESCRIPTION='*.*'/DISTRIB_DESCRIPTION='EasyWrt-Xiaomi-AX3000T-$(date +%Y%m%d)'/g"  package/base-files/files/etc/openwrt_release
              
    - name: Configuration Customization - Build_mt7981_ax3000t
      env:
        CONFIG_FILE: './configs/ARM/mt798x/mt7981_ax3000t.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        cd openwrt && make defconfig
        
    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      working-directory: ./openwrt
      run: |
        echo "开始构建固件..."
        make -j$(nproc) V=s 2>&1 | tee build.log
        
        # 检查构建是否成功
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
          echo "构建失败！显示最后100行日志："
          tail -n 100 build.log
          exit 1
        fi
        
        echo "构建完成，检查输出目录..."
        ls -la bin/targets/ || true
        find bin/targets/ -name "*.bin" -type f || true

    - name: Check build results
      working-directory: ./openwrt
      run: |
        echo "=== 检查构建结果 ==="
        echo "bin/targets 目录结构："
        find bin/targets/ -type f -name "*.bin" | head -20
        
        echo -e "\n=== 查找所有 .bin 文件 ==="
        find bin/ -name "*.bin" -type f
        
        echo -e "\n=== mediatek 目录内容 ==="
        ls -la bin/targets/mediatek/ || echo "mediatek 目录不存在"
        
        echo -e "\n=== mt7981 目录内容 ==="
        ls -la bin/targets/mediatek/mt7981/ || echo "mt7981 目录不存在"
        
    - name: Assemble Artifact
      id: assemble_artifact
      run: |
        rm -rf ./ARM_Out
        mkdir -p ./ARM_Out/
        
        getmd5()
        {
        md5sum=`md5sum $1`
        md5=`echo ${md5sum% *}`
        md5=`echo ${md5:0:10}`
        }
        
        # 查找实际生成的固件文件
        echo "查找固件文件..."
        firmware_files=$(find openwrt/bin/targets/ -name "*sysupgrade*.bin" -type f)
        
        if [ -z "$firmware_files" ]; then
          echo "错误：未找到任何 sysupgrade.bin 文件"
          echo "所有 .bin 文件："
          find openwrt/bin/targets/ -name "*.bin" -type f
          exit 1
        fi
        
        echo "找到固件文件："
        echo "$firmware_files"
        
        # 处理找到的固件文件
        for rom in $firmware_files; do
          if [[ $rom == *"xiaomi"* ]] && [[ $rom == *"ax3000t"* ]]; then
            echo "处理固件文件: $rom"
            getmd5 $rom        
            cp -a $rom ./ARM_Out/EasyWrt-Xiaomi-AX3000T-5.4-$(date +%Y%m%d)_${md5}.bin
            echo "固件文件已复制到 ARM_Out/"
            break
          fi
        done
        
        # 如果没找到特定的AX3000T文件，使用第一个找到的文件
        if [ ! -f ./ARM_Out/*.bin ]; then
          echo "未找到AX3000T特定文件，使用第一个找到的固件文件"
          first_firmware=$(echo "$firmware_files" | head -n1)
          getmd5 $first_firmware
          cp -a $first_firmware ./ARM_Out/EasyWrt-Generic-$(date +%Y%m%d)_${md5}.bin
        fi
        
        echo "ARM_Out 目录内容："
        ls -la ./ARM_Out/
               
    - name: Upload Firmwares
      uses: actions/upload-artifact@main
      with:
        name: AX3000T-OpenWrt
        path: ARM_Out/*.bin

    - name: Upload config
      uses: actions/upload-artifact@main
      with:
        name: ax3000t-config
        path: openwrt/.config

    - name: Upload build log
      uses: actions/upload-artifact@main
      with:
        name: build-log
        path: openwrt/build.log

    - name: Upload Packages
      uses: actions/upload-artifact@main
      with:
        name: AX3000T-Packages
        path: openwrt/bin/packages
        
    - name: Generate Tag & Release Name
      id: generate_name
      run: |
        time=$(date +%Y%m%d%H%M%S)
        release_tag="$time"
        release_name="EasyWrt-小米AX3000T-$(date +%Y%m%d)"
        echo "release_name=$release_name" >> $GITHUB_OUTPUT
        echo "release_tag=$release_tag" >> $GITHUB_OUTPUT      

    - name: Create Release & Upload
      uses: ncipollo/release-action@v1.14.0
      with:
        artifacts: ARM_Out/*.bin
        name: ${{ steps.generate_name.outputs.release_name }}
        tag: ${{ steps.generate_name.outputs.release_tag }}
        token: ${{ secrets.GITHUB_TOKEN }}
